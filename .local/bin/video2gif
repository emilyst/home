#!/usr/bin/env ruby
#
# Converts any video understood by FFmpeg into a high-quality GIF
#
# Usage:
#
#  video2gif video.mp4 [options]

require 'optparse'
require 'open3'
require 'logger'


def is_executable?(command)
  ENV['PATH'].split(File::PATH_SEPARATOR).map do |path|
    (ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']).map do |extension|
      File.executable?(File.join(path, "#{command}#{extension}"))
    end
  end.flatten.any?
end

def parse(args, logger)
  options = {}

  parser = OptionParser.new do |parser|
    parser.banner = 'Usage: video2gif <video> [options] [<output GIF filename>]'
    parser.separator ''
    parser.separator 'General GIF options:'

    parser.on('-sSEEK', '--seek=SEEK', 'Set time to seek to in the input video') do |s|
      options[:seek] = s
    end

    parser.on('-tTIME', '--time=TIME', 'Set duration to use from the input video') do |t|
      options[:time] = t
    end

    parser.on('-fFRAMES', '--fps=FRAMES', 'Set frames per second for the resulting GIF') do |f|
      options[:fps] = f
    end

    parser.on('-wWIDTH', '--width=WIDTH', 'Set the width of the resulting GIF') do |w|
      options[:width] = w
    end

    # parser.on('-hHEIGHT', '--height=HEIGHT', 'Set the height of the resulting GIF') do |h|
    #   options[:height] = h
    # end

    parser.on('-pPALETTE', '--palette=PALETTE', 'Set the palette size of the resulting GIF') do |p|
      options[:palette] = p
    end

    parser.on('-o', '--[no-]optimize', 'Attempt to optimize GIF size with ImageMagick (default yes if available)') do |p|
      options[:optimize] = p
    end

    parser.separator ''
    parser.separator 'Text overlay options (only used if text is defined):'

    parser.on('-TTEXT', '--text=TEXT', 'Set text to superimpose on the GIF (use "\n" for line breaks)') do |p|
      options[:text] = p
    end

    parser.on('-CTEXTCOLOR', '--text-color=TEXTCOLOR', 'Set the color for text') do |p|
      options[:textcolor] = p
    end

    parser.on('-STEXTSIZE', '--text-size=TEXTSIZE', 'Set the size for text') do |p|
      options[:textsize] = p
    end

    parser.on('-BTEXTBORDER', '--text-border=TEXTBORDER', 'Set the width of the border for text') do |p|
      options[:textborder] = p
    end

    parser.on('-FTEXTFONT', '--text-font=TEXTFONT', 'Set the font name for text') do |p|
      options[:textfont] = p
    end

    parser.on('-VTEXTSTYLE', '--text-variant=TEXTVARIANT', 'Set the font variant for text (e.g., "Semibold")') do |p|
      options[:textvariant] = p
    end

    parser.on('-XTEXTXPOS', '--text-x-position=TEXTXPOS', 'Set the X position for the text, starting from left (default is center)') do |p|
      options[:xpos] = p
    end

    parser.on('-YTEXTXPOS', '--text-y-position=TEXTYPOS', 'Set the Y position for the text, starting from top (default is near bottom)') do |p|
      options[:ypos] = p
    end

    parser.separator ''
    parser.separator 'Other options:'

    parser.on_tail('-v', '--verbose', 'Show ffmpeg command executed and output') do |p|
      options[:verbose] = p
    end

    parser.on_tail('-q', '--quiet', 'Suppress all log output (overrides verbose)') do |p|
      options[:quiet] = p
    end

    parser.on_tail('-h', '--help', 'Show this message') do
      puts parser
      exit
    end

    parser.parse!(args)
  end

  parser.parse!

  unless is_executable?('ffmpeg')
    puts 'ERROR: Requires FFmpeg to be installed!'
    exit 1
  end

  if args.size < 1 || args.size > 2
    puts 'ERROR: Specify one video to convert at a time!'
    puts ''
    puts parser.help
    exit 1
  end

  unless File.exists?(args[0])
    puts "ERROR: Specified video file does not exist: #{args[0]}!"
    puts ''
    puts parser.help
    exit
  end

  if !is_executable?('convert') && options[:optimize]
    logger.warn('ImageMagick isn\'t available! Optimization will be'\
                ' disabled!') unless options[:quiet]
    options[:optimize] = false
  end

  options
end

def build_filter_complex(options)
  fps          = options[:fps]     || 15
  palette_size = options[:palette] || 256
  width        = options[:width]   # default is not to scale at all

  # create filter elements
  fps_filter        = "fps=#{fps}"
  scale_filter      = "scale=#{width}:-1:flags=lanczos:sws_dither=none" if options[:width]
  palettegen_filter = "palettegen=max_colors=#{palette_size}:stats_mode=diff"
  paletteuse_filter = 'paletteuse=dither=sierra2_4a:diff_mode=rectangle'
  drawtext_filter   = if options[:text]
                        count_of_lines = options[:text].scan(/\\n/).count + 1

                        x      = options[:xpos]        || '(main_w/2-text_w/2)'
                        y      = options[:ypos]        || "(main_h-line_h*1.5*#{count_of_lines})"
                        size   = options[:textsize]    || 32
                        color  = options[:textcolor]   || 'white'
                        border = options[:textborder]  || 3
                        font   = options[:textfont]    || 'Arial'
                        style  = options[:textvariant] || 'Bold'
                        text   = options[:text]
                          .gsub(/\\n/,                                                        '')
                          .gsub(/([:])/,                                                      '\\\\\\\\\\1')
                          .gsub(/([,])/,                                                      '\\\\\\1')
                          .gsub(/\b'\b/,                                                      "\u2019")
                          .gsub(/\B"\b([^"\u201C\u201D\u201E\u201F\u2033\u2036\r\n]+)\b?"\B/, "\u201C\\1\u201D")
                          .gsub(/\B'\b([^'\u2018\u2019\u201A\u201B\u2032\u2035\r\n]+)\b?'\B/, "\u2018\\1\u2019")

                        'drawtext=' + %W[
                          x='#{x}'
                          y='#{y}'
                          fontsize='#{size}'
                          fontcolor='#{color}'
                          borderw='#{border}'
                          fontfile='#{font}'\\\\:style='#{style}'
                          text='#{text}'
                        ].join(':')
                      end

  filter_complex = []

  # first, apply the same filters we'll use later in the same order
  # before applying the palettegen so that we accurately predict the
  # final palette
  filter_complex << fps_filter
  filter_complex << scale_filter if options[:width]
  filter_complex << drawtext_filter if options[:text]

  # then generate the palette (and label this filter stream)
  filter_complex << palettegen_filter + '[palette]'

  # then refer back to the first video input stream and the filter
  # complex stream to apply the generated palette to the video stream
  # along with the other filters (drawing text last so that it isn't
  # affected by scaling)
  filter_complex << '[0:v][palette]' + paletteuse_filter
  filter_complex << fps_filter
  filter_complex << scale_filter if options[:width]
  filter_complex << drawtext_filter if options[:text]

  filter_complex.join(',')
end

def build_output_filename(args)
  if args[1]
    args[1].end_with?('.gif') ? args[1] : args[1] + '.gif'
  else
    File.join(File.dirname(args[0]),
              File.basename(args[0], '.*') + '.gif')
  end
end

def build_ffmpeg_command(args, options, logger)
  command = []
  command << 'ffmpeg'
  command << '-y'  # always overwrite
  command << '-analyzeduration' << '2147483647' << '-probesize' << '2147483647'
  command << '-nostdin'
  command << '-ss' << options[:seek] if options[:seek]
  command << '-t' << options[:time] if options[:time]
  command << '-i' << args[0]
  command << '-filter_complex' << build_filter_complex(options)
  command << '-f' << 'gif'

  # if we're not optimizing, we won't send to stdout
  command << (options[:optimize] ? '-' : build_output_filename(args))

  logger.info(command.join(' ')) if options[:verbose] unless options[:quiet]

  command
end

def build_convert_command(args, options, logger)
  command = []
  command << 'convert' << '-' << '-layers' << 'Optimize' << build_output_filename(args)

  logger.info(command.join(' ')) if options[:verbose] unless options[:quiet]

  command
end

logger = Logger.new(STDOUT)
options = parse(ARGV, logger)

pipeline_items = [build_ffmpeg_command(ARGV, options, logger)]
pipeline_items << build_convert_command(ARGV, options, logger) if options[:optimize]

read_io, write_io = IO.pipe
Open3.pipeline_start(*pipeline_items,
                     out: write_io,
                     err: write_io) do |threads|
                       write_io.close
                       if options[:verbose]
                         read_io.each(chomp: true) { |line| logger.info(line) unless options[:quiet] }
                       else
                         read_io.read(1024) until read_io.eof?
                       end
                       read_io.close

                       threads.each do |t|
                         raise "Process #{t.pid} failed!" unless t.value.success?
                       end
                     end
