#!/usr/bin/env ruby
#
# Converts any video understood by FFmpeg into a high-quality GIF
#
# Usage:
#
#  video2gif video.mp4 [options]

require 'optparse'

def is_executable?(command)
  ENV['PATH'].split(File::PATH_SEPARATOR).map do |path|
    (ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']).map do |extension|
      File.executable?(File.join(path, "#{command}#{extension}"))
    end
  end.flatten.any?
end

def parse(args)
  options = {}

  parser = OptionParser.new do |parser|
    parser.banner = 'Usage: video2gif <video> [options]'
    parser.separator ''
    parser.separator 'General GIF options:'

    parser.on('-oNAME', '--output=NAME', 'Set the name for the resulting GIF') do |n|
      options[:output] = n
    end

    parser.on('-sSEEK', '--seek=SEEK', 'Set time to seek to in the input video') do |s|
      options[:seek] = s
    end

    parser.on('-tTIME', '--time=TIME', 'Set duration to use from the input video') do |t|
      options[:time] = t
    end

    parser.on('-fFRAMES', '--fps=FRAMES', 'Set frames per second for the resulting GIF') do |f|
      options[:fps] = f
    end

    parser.on('-wWIDTH', '--width=WIDTH', 'Set the width of the resulting GIF') do |w|
      options[:width] = w
    end

    # parser.on('-hHEIGHT', '--height=HEIGHT', 'Set the height of the resulting GIF') do |h|
    #   options[:height] = h
    # end

    parser.on('-pPALETTE', '--palette=PALETTE', 'Set the palette size of the resulting GIF') do |p|
      options[:palette] = p
    end

    parser.separator ''
    parser.separator 'Text overlay options (only used if text is defined):'

    parser.on('-TTEXT', '--text=TEXT', 'Set text to superimpose on the GIF (use "\n" for line breaks)') do |p|
      options[:text] = p
    end

    parser.on('-CTEXTCOLOR', '--text-color=TEXTCOLOR', 'Set the color for text') do |p|
      options[:textcolor] = p
    end

    parser.on('-STEXTSIZE', '--text-size=TEXTSIZE', 'Set the size for text') do |p|
      options[:textsize] = p
    end

    parser.on('-BTEXTBORDER', '--text-border=TEXTBORDER', 'Set the width of the border for text') do |p|
      options[:textborder] = p
    end

    parser.on('-FTEXTFONT', '--text-font=TEXTFONT', 'Set the font name for text') do |p|
      options[:textfont] = p
    end

    parser.on('-VTEXTSTYLE', '--text-variant=TEXTVARIANT', 'Set the font variant for text (e.g., "Semibold")') do |p|
      options[:textvariant] = p
    end

    parser.separator ''
    parser.separator 'Other options:'

    parser.on_tail('-h', '--help', 'Show this message') do
      puts parser
      exit
    end

    parser.parse!(args)
  end

  parser.parse!

  unless is_executable?('ffmpeg')
    puts 'ERROR: Requires FFmpeg to be installed!'
    exit
  end

  if args.size != 1
    puts 'ERROR: Specify one video to convert at a time!'
    puts ''
    puts parser.help
    exit
  end

  unless File.exists?(args[0])
    puts "ERROR: Specified video file does not exist: #{args[0]}!"
    puts ''
    puts parser.help
    exit
  end

  options
end

def build_filter_complex(options)
  fps          = options[:fps]     || 15
  palette_size = options[:palette] || 256
  width        = options[:width]   # default is not to scale at all

  # create filter elements
  fps_filter        = "fps=#{fps}"
  scale_filter      = "scale=#{width}:-1:flags=lanczos" if options[:width]
  palettegen_filter = "palettegen=max_colors=#{palette_size}:stats_mode=diff"
  paletteuse_filter = 'paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle'
  drawtext_filter   = if options[:text]
                        count_of_lines = options[:text].scan(/\\n/).count + 1

                        # computers will be the end of us all
                        text   = options[:text].gsub(/\\n/, '')
                                               .gsub(/([:])/, '\\\\\\\\\\1')
                                               .gsub(/([,])/, '\\\\\\1')
                        size   = options[:textsize]    || 36
                        color  = options[:textcolor]   || 'white'
                        border = options[:textborder]  || 3
                        font   = options[:textfont]    || 'Arial'
                        style  = options[:textvariant] || 'Bold'

                        'drawtext=' + [
                          # centers the text as a whole
                          'x=(main_w/2-text_w/2)',
                          # bumps text from bottom as a whole based on
                          # line height (with some margin)
                          "y=(main_h-line_h*1.33*#{count_of_lines})",
                          "fontsize=#{size}",
                          "fontcolor=#{color}",
                          "borderw=#{border}",
                          "font=#{font}",
                          "style:#{style}",
                          "text=#{text}",
                        ].join(':')
                      end

  filter_complex = []

  # first, apply the same filters we'll use later in the same order
  # before applying the palettegen so that we accurately predict the
  # final palette
  filter_complex << fps_filter
  filter_complex << scale_filter if options[:width]
  filter_complex << drawtext_filter if options[:text]

  # then generate the palette (and label this filter stream)
  filter_complex << palettegen_filter + '[palette]'

  # then refer back to the first video input stream and the filter
  # complex stream to apply the generated palette to the video stream
  # along with the other filters (drawing text last so that it isn't
  # affected by scaling)
  filter_complex << '[0:v][palette]' + paletteuse_filter
  filter_complex << fps_filter
  filter_complex << scale_filter if options[:width]
  filter_complex << drawtext_filter if options[:text]

  filter_complex.join(',')
end

def build_command_line(args, options)
  command_name      = 'ffmpeg'
  input_filename    = args[0]
  output_filename   = if options[:output]
                        if options[:output].end_with?('.gif')
                          options[:output]
                        else
                          options[:output] + '.gif'
                        end
                      else
                        File.join(File.dirname(input_filename),
                                  File.basename(input_filename, '.*') + '.gif')
                      end

  command = []
  command << command_name
  command << '-ss' << options[:seek] if options[:seek]
  command << '-t' << options[:time] if options[:time]
  command << '-i' << input_filename
  command << '-filter_complex' << build_filter_complex(options)
  command << '-map' << '0:0'
  command << output_filename
end

exec(*build_command_line(ARGV, parse(ARGV)))
